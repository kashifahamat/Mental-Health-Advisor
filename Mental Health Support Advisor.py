# -*- coding: utf-8 -*-
"""Untitled64.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1eRxKX0McBYDSBuGmpJn6duyQr1tfHktA
"""

# STEP 1: Install Required Libraries

!pip install huggingface_hub
!pip install transformers gradio

# STEP 2: Import Python Libraries

from transformers import pipeline
import gradio as gr
import random

# Sample strategies stored as dictionary
strategies = {
    "mindfulness": {
        "title": "Practice Mindfulness",
        "description": "Engage in mindful breathing, meditation, or journaling to reduce stress and increase self-awareness.",
        "tags": ["stress", "anxiety", "mindfulness", "focus"]
    },
    "physical_activity": {
        "title": "Increase Physical Activity",
        "description": "Regular movement such as walking, yoga, or exercise can boost mood and energy levels.",
        "tags": ["low mood", "fatigue", "exercise", "motivation"]
    },
    "talk_support": {
        "title": "Talk to Someone",
        "description": "Connecting with a trusted friend, family member, or therapist can help process emotions.",
        "tags": ["isolation", "loneliness", "support", "talk"]
    },
    "routine": {
        "title": "Build a Daily Routine",
        "description": "Having a consistent schedule improves stability and helps reduce overwhelm.",
        "tags": ["overwhelm", "anxiety", "routine", "planning"]
    }
}

# STEP 4: Load Hugging Face Language Model

generator = pipeline("text-generation", model="distilgpt2")

# STEP 5: Define Mental Health Recommendation Logic

def recommend_strategy(feelings, concern, energy_level):
    matches = []

    for strategy in strategies.values():
        if any(tag in feelings.lower() for tag in strategy["tags"]) or concern.lower() in strategy["description"].lower():
            matches.append(strategy)

    if not matches:
        return "‚ùå Sorry, I couldn't find any wellness strategies that match your current state."

    chosen = random.choice(matches)

    prompt = f"A person feels {feelings}, has a concern about {concern}, and rates their energy level as {energy_level}/10. Explain why the strategy '{chosen['title']}' would help them feel better."

    explanation = generator(prompt, max_length=100, do_sample=True, temperature=0.7)[0]['generated_text']

    return f"""
üßò **Suggested Strategy**: {chosen['title']}

üí° **Why this might help?**
{explanation}
"""

# STEP 6: Define Full Advisor Agent Function

def mental_health_advisor(name, feelings, concern, energy_level):
    recommendation = recommend_strategy(feelings, concern, energy_level)
    return f"""
üëã Hi **{name}**,

üß† **How you're feeling**: {feelings}
‚ùì **Primary Concern**: {concern}
‚ö° **Energy Level**: {energy_level}/10

---

{recommendation}
"""

# STEP 7: Create Gradio Interface

iface = gr.Interface(
    fn=mental_health_advisor,
    inputs=[
        gr.Textbox(label="Your Name"),
        gr.Textbox(label="How are you feeling today?"),
        gr.Textbox(label="What's your main concern right now?"),
        gr.Slider(minimum=0, maximum=10, step=1, label="Current Energy Level")
    ],
    outputs="markdown",
    title="üß† Mental Health Support Advisor",
    description="Get AI-generated emotional wellness tips based on how you're feeling. This tool offers supportive suggestions‚Äînot professional therapy.",
    theme="default"
)

# STEP 8: Launch the App (with Public Link)

iface.launch(share=True)